import { storage } from "./storage";
import { Account, BotSettings } from "@shared/schema";
import { Client, Events, GatewayIntentBits, Message } from "discord.js";

// Factory to create and configure Discord bot
export const createDiscordBot = (token: string) => {
  if (!token) {
    console.warn("Discord bot token not provided. Bot will not be initialized.");
    return null;
  }

  // Create a new client instance
  const client = new Client({
    intents: [
      GatewayIntentBits.Guilds,
      GatewayIntentBits.GuildMessages,
      GatewayIntentBits.MessageContent,
      GatewayIntentBits.GuildMembers,
    ],
  });

  // When the client is ready, run this code (only once)
  client.once(Events.ClientReady, (readyClient) => {
    console.log(`Discord bot logged in as ${readyClient.user.tag}`);
    
    // Log bot start in the system
    storage.createLog({
      type: "success",
      action: "BOT_START",
      message: `Discord bot started as ${readyClient.user.tag}`,
    });
  });

  // Set up message event handler
  client.on(Events.MessageCreate, async (message: Message) => {
    try {
      // Ignore bot messages
      if (message.author.bot) return;
      
      // Get guild settings or use defaults
      let settings: BotSettings | undefined;
      
      if (message.guild) {
        settings = await storage.getBotSettings(message.guild.id);
        if (!settings) {
          // Create default settings for this guild
          settings = await storage.createBotSettings({
            guildId: message.guild.id,
            prefix: "!",
            allowedRoles: [],
            adminRoles: [],
            cooldown: 3600
          });
        }
      } else {
        // DM case - use default prefix
        settings = {
          id: 0,
          guildId: "dm",
          prefix: "!",
          allowedRoles: [],
          adminRoles: [],
          cooldown: 3600,
          createdAt: new Date(),
          updatedAt: new Date()
        };
      }
      
      // Check if message starts with the prefix
      const prefix = settings.prefix;
      if (!message.content.startsWith(prefix)) return;
      
      // Parse command and arguments
      const args = message.content.slice(prefix.length).trim().split(/ +/);
      const command = args.shift()?.toLowerCase();
      
      // Handle commands
      switch(command) {
        case "generate":
          await handleGenerateCommand(message, args, settings);
          break;
        case "stock":
          await handleStockCommand(message, args);
          break;
        case "add":
          await handleAddCommand(message, args, settings);
          break;
        case "status":
          await handleStatusCommand(message);
          break;
        case "help":
          await handleHelpCommand(message, prefix);
          break;
        case "profile":
          await handleProfileCommand(message);
          break;
        case "cooldown":
          await handleCooldownCommand(message, settings);
          break;
        case "info":
          await handleInfoCommand(message, args);
          break;
        case "remove":
          await handleRemoveCommand(message, args, settings);
          break;
        case "blacklist":
          await handleBlacklistCommand(message, args);
          break;
        case "setcooldown":
          await handleSetCooldownCommand(message, args, settings);
          break;
        default:
          // Unknown command
          break;
      }
    } catch (error) {
      console.error("Error handling Discord message:", error);
      
      // Log error in the system
      storage.createLog({
        type: "error",
        action: "BOT_ERROR",
        message: `Error processing message: ${error instanceof Error ? error.message : 'Unknown error'}`,
      });
    }
  });

  // Helper function to check if user has admin permissions
  const isAdmin = async (message: Message): Promise<boolean> => {
    // In DMs, only allow admin commands from bot owner
    if (!message.guild) {
      return message.author.id === process.env.DISCORD_OWNER_ID;
    }
    
    // Get guild settings
    const settings = await storage.getBotSettings(message.guild.id);
    if (!settings || !settings.adminRoles || settings.adminRoles.length === 0) {
      // If no admin roles configured, only guild administrators can use admin commands
      return message.member?.permissions.has("Administrator") || false;
    }
    
    // Check if user has any admin role
    return settings.adminRoles.some(roleId => 
      message.member?.roles.cache.has(roleId)
    ) || message.member?.permissions.has("Administrator") || false;
  };

  // Helper to check if user has permission to use the bot
  const hasPermission = async (message: Message): Promise<boolean> => {
    // In DMs, everyone can use basic commands
    if (!message.guild) return true;
    
    // Get guild settings
    const settings = await storage.getBotSettings(message.guild.id);
    if (!settings || !settings.allowedRoles || settings.allowedRoles.length === 0) {
      // If no roles configured, everyone can use the bot
      return true;
    }
    
    // Check if user has any allowed role or is an admin
    return settings.allowedRoles.some(roleId => 
      message.member?.roles.cache.has(roleId)
    ) || isAdmin(message);
  };

  // Command handlers
  const handleGenerateCommand = async (message: Message, args: string[], settings: BotSettings) => {
    // Check if user has permission
    if (!await hasPermission(message)) {
      return message.reply("‚ùå **Acc√®s Refus√©!** Vous n'avez pas la permission d'utiliser cette commande.");
    }
    
    // Check cooldown (implement using a simple map or storage)
    // For simplicity, we're not implementing cooldown in this example
    
    // Get service name from args
    const serviceName = args[0]?.toLowerCase();
    if (!serviceName) {
      return message.reply(`‚ö†Ô∏è **Erreur:** Veuillez sp√©cifier un service. \n**Usage:** \`${settings.prefix}generate [service_name]\``);
    }
    
    try {
      // Find category
      const category = await storage.getCategoryByName(serviceName);
      if (!category) {
        const categories = await storage.getCategories();
        const categoryList = categories.map(c => `\`${c.name}\``).join(", ");
        return message.reply(`‚ùå **Service Non Trouv√©:** \`${serviceName}\` n'existe pas.\n\n**Services Disponibles:**\n${categoryList}`);
      }
      
      // Find available account
      const accounts = await storage.getAccounts({ 
        categoryId: category.id, 
        status: "available" 
      });
      
      if (accounts.length === 0) {
        await storage.createLog({
          type: "warning",
          action: "ACCOUNT_GENERATION_FAILED",
          message: `No available accounts for ${serviceName}`,
        });
        
        return message.reply(`üìâ **Stock √âpuis√©:** D√©sol√©, aucun compte \`${category.name}\` n'est disponible actuellement. Veuillez r√©essayer plus tard ou contacter un administrateur.`);
      }
      
      // Get the first available account
      const account = accounts[0];
      
      // Mark as generated
      await storage.updateAccount(account.id, {
        status: "generated",
        generatedBy: message.author.tag,
        generatedAt: new Date()
      });
      
      // Log generation
      await storage.createLog({
        type: "success",
        action: "ACCOUNT_GENERATED",
        message: `Account generated for ${message.author.tag}: ${account.email} (${category.name})`,
      });
      
      // Send account details via DM
      try {
        await message.author.send(
          `üéâ **Compte ${category.name} G√©n√©r√©!**\n\n` +
          `üìß **Email:** \`${account.email}\`\n` +
          `üîë **Mot de passe:** \`${account.password}\`\n\n` +
          `‚è≥ **Expire:** ${account.expiresAt ? new Date(account.expiresAt).toLocaleDateString() : 'Non sp√©cifi√©'}\n\n` +
          `üí° **Note:** Merci de ne pas partager ce compte. Si vous rencontrez un probl√®me, contactez un administrateur.`
        );
        
        // Confirm in the channel
        return message.reply(`‚úÖ **Succ√®s!** Un compte \`${category.name}\` a √©t√© envoy√© dans vos messages priv√©s.`);
      } catch (err) {
        // If DM fails
        await storage.updateAccount(account.id, { status: "available" });
        return message.reply("‚ùå **Erreur DM:** Impossible d'envoyer un message priv√©. Veuillez activer les DMs provenant des membres du serveur et r√©essayer.");
      }
    } catch (error) {
      console.error("Error generating account:", error);
      
      // Log error
      await storage.createLog({
        type: "error",
        action: "ACCOUNT_GENERATION_ERROR",
        message: `Error generating account: ${error instanceof Error ? error.message : 'Unknown error'}`,
      });
      
      return message.reply("‚ö†Ô∏è **Erreur Syst√®me:** Une erreur est survenue lors de la g√©n√©ration du compte. Veuillez r√©essayer plus tard.");
    }
  };

  const handleStockCommand = async (message: Message, args: string[]) => {
    // Check if user has permission
    if (!await hasPermission(message)) {
      return message.reply("‚ùå **Acc√®s Refus√©!** Vous n'avez pas la permission d'utiliser cette commande.");
    }
    
    // Get service name from args (optional)
    const serviceName = args[0]?.toLowerCase();
    
    try {
      // Get all categories
      const categories = await storage.getCategories();
      
      // Filter by service name if provided
      const targetCategories = serviceName 
        ? categories.filter(c => c.name.toLowerCase() === serviceName) 
        : categories;
      
      if (serviceName && targetCategories.length === 0) {
        return message.reply(`‚ùå **Service Non Trouv√©:** \`${serviceName}\` n'existe pas.`);
      }
      
      // Get stock information for each category
      const stockInfo = await Promise.all(targetCategories.map(async (category) => {
        const accounts = await storage.getAccounts({ categoryId: category.id });
        const available = accounts.filter(a => a.status === "available").length;
        return {
          name: category.name,
          total: accounts.length,
          available
        };
      }));
      
      // Prepare stock message
      let stockMessage = "üìä **Inventaire Actuel des Comptes**\n\n";
      
      // Organize by category type
      const categoryGroups: Record<string, string> = {
        'Streaming Vid√©o': 'üé¨ **Streaming Vid√©o**\n',
        'Musique': 'üéµ **Musique**\n',
        'Livres / √âducation': 'üìö **Livres / √âducation**\n',
        'Stockage en ligne / Outils': '‚òÅÔ∏è **Stockage en ligne / Outils**\n',
        'Jeux & Abonnements': 'üéÆ **Jeux & Abonnements**\n',
        'other': 'üîÑ **Autres Services**\n'
      };
      
      // Fill in stock info by category
      stockInfo.forEach(info => {
        const categoryType = Object.keys(categoryGroups).includes(info.name) 
          ? info.name 
          : 'other';
        
        const statusEmoji = info.available > 0 ? 'üü¢' : 'üî¥';
        categoryGroups[categoryType as keyof typeof categoryGroups] += `${statusEmoji} **${info.name}**: \`${info.available}/${info.total}\` disponibles\n`;
      });
      
      // Add non-empty categories to stock message
      Object.keys(categoryGroups).forEach(category => {
        const catGroup = categoryGroups[category as keyof typeof categoryGroups];
        if (catGroup.split('\n').length > 1) {
          stockMessage += catGroup + '\n';
        }
      });
      
      // Add total count
      const totalAccounts = stockInfo.reduce((sum, info) => sum + info.total, 0);
      const totalAvailable = stockInfo.reduce((sum, info) => sum + info.available, 0);
      
      stockMessage += `\nüìå **Total**: \`${totalAvailable}/${totalAccounts}\` comptes disponibles`;
      
      return message.reply(stockMessage);
    } catch (error) {
      console.error("Error checking stock:", error);
      
      // Log error
      await storage.createLog({
        type: "error",
        action: "STOCK_CHECK_ERROR",
        message: `Error checking stock: ${error instanceof Error ? error.message : 'Unknown error'}`,
      });
      
      return message.reply("‚ö†Ô∏è **Erreur Syst√®me:** Une erreur est survenue lors de la v√©rification du stock. Veuillez r√©essayer plus tard.");
    }
  };

  const handleAddCommand = async (message: Message, args: string[], settings: BotSettings) => {
    // Check if user is admin
    if (!await isAdmin(message)) {
      return message.reply("‚ùå **Acc√®s Refus√©!** Vous n'avez pas les permissions administrateur n√©cessaires.");
    }
    
    // Check arguments
    if (args.length < 2) {
      return message.reply(`‚ö†Ô∏è **Format Incorrect:** \n**Usage:** \`${settings.prefix}add [service_name] [email:password]\``);
    }
    
    const serviceName = args[0];
    const accountDetails = args[1];
    
    // Check account format
    if (!accountDetails.includes(':')) {
      return message.reply(`‚ùå **Format Invalide:** Veuillez utiliser le format \`email:password\``);
    }
    
    const [email, password] = accountDetails.split(':');
    
    try {
      // Find or create category
      let category = await storage.getCategoryByName(serviceName);
      
      if (!category) {
        category = await storage.createCategory({
          name: serviceName,
          description: `${serviceName} accounts`
        });
      }
      
      // Add account
      const account = await storage.createAccount({
        email,
        password,
        categoryId: category.id,
        status: "available",
        expiresAt: null,
        generatedBy: null,
        generatedAt: null
      });
      
      // Log account addition
      await storage.createLog({
        type: "success",
        action: "ACCOUNT_ADDED",
        message: `Admin ${message.author.tag} added account: ${email} (${category.name})`,
      });
      
      return message.reply(`‚úÖ **Compte Ajout√©:** \`${serviceName}\` compte: \`${email}\` ajout√© avec succ√®s!`);
    } catch (error) {
      console.error("Error adding account:", error);
      
      // Log error
      await storage.createLog({
        type: "error",
        action: "ACCOUNT_ADD_ERROR",
        message: `Error adding account: ${error instanceof Error ? error.message : 'Unknown error'}`,
      });
      
      return message.reply("‚ö†Ô∏è **Erreur Syst√®me:** Une erreur est survenue lors de l'ajout du compte. Veuillez r√©essayer plus tard.");
    }
  };

  const handleStatusCommand = async (message: Message) => {
    // Check if user has permission
    if (!await hasPermission(message)) {
      return message.reply("‚ùå **Acc√®s Refus√©!** Vous n'avez pas la permission d'utiliser cette commande.");
    }
    
    try {
      // Get stats
      const stats = await storage.getDashboardStats();
      
      // Format uptime
      const uptime = client.uptime ? Math.floor(client.uptime / 1000 / 60) : 0;
      const hours = Math.floor(uptime / 60);
      const minutes = uptime % 60;
      const uptimeFormatted = hours > 0 
        ? `${hours}h ${minutes}m` 
        : `${minutes}m`;
      
      // Bot status emoji
      const statusEmoji = "üü¢";
      
      // Format last generation time to be more human readable
      const lastGen = stats.lastGeneration 
        ? new Date(stats.lastGeneration)
        : null;
      
      const lastGenFormatted = lastGen 
        ? `${new Date(lastGen).toLocaleString('fr-FR', { 
            day: '2-digit', 
            month: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
          })}`
        : 'Aucune';
      
      const stockHealth = stats.availableAccounts > 0 
        ? (stats.availableAccounts > stats.totalAccounts / 2 
          ? "üü¢ Excellent" 
          : "üü° Correct")
        : "üî¥ Critique";
      
      const statusMessage = `ü§ñ **Statut du Bot TawnAnime**\n\n` +
        `${statusEmoji} **Statut:** En ligne\n` +
        `üåê **Serveurs connect√©s:** ${client.guilds.cache.size}\n` +
        `‚è±Ô∏è **Temps de fonctionnement:** ${uptimeFormatted}\n\n` +
        `üìä **Statistiques des Comptes**\n` +
        `üíæ **Total des comptes:** ${stats.totalAccounts}\n` +
        `‚úÖ **Comptes disponibles:** ${stats.availableAccounts}\n` +
        `üìà **G√©n√©r√©s aujourd'hui:** ${stats.generatedToday}\n` +
        `üïí **Derni√®re g√©n√©ration:** ${lastGenFormatted}\n\n` +
        `üìã **√âtat du stock:** ${stockHealth}`;
      
      return message.reply(statusMessage);
    } catch (error) {
      console.error("Error checking status:", error);
      
      // Log error
      await storage.createLog({
        type: "error",
        action: "STATUS_CHECK_ERROR",
        message: `Error checking status: ${error instanceof Error ? error.message : 'Unknown error'}`,
      });
      
      return message.reply("‚ö†Ô∏è **Erreur Syst√®me:** Une erreur est survenue lors de la v√©rification du statut. Veuillez r√©essayer plus tard.");
    }
  };

  const handleHelpCommand = async (message: Message, prefix: string) => {
    const isAdminUser = await isAdmin(message);
    
    let helpMessage = `üîç **Commandes du Bot TawnAnime**\n\n` +
      `üë§ **Commandes Utilisateur:**\n\n` +
      `\`${prefix}help\` - Affiche ce message d'aide\n` +
      `\`${prefix}generate [service]\` - G√©n√®re un compte pour un service sp√©cifique\n` +
      `\`${prefix}stock [service]\` - V√©rifie les comptes disponibles en stock\n` +
      `\`${prefix}profile\` - Affiche vos informations et statistiques\n` +
      `\`${prefix}cooldown\` - V√©rifie le temps restant avant nouvelle g√©n√©ration\n` +
      `\`${prefix}info [service]\` - Donne une description du service et instructions\n` +
      `\`${prefix}status\` - V√©rifie le statut du bot et les statistiques des comptes\n\n` +
      
      `üî∏ **Exemples:**\n` +
      `\`${prefix}generate netflix\` - G√©n√®re un compte Netflix\n` +
      `\`${prefix}stock spotify\` - V√©rifie les comptes Spotify disponibles\n` +
      `\`${prefix}info canva\` - Affiche les informations sur Canva\n`;
    
    // Admin commands - visible uniquement pour les admins
    if (isAdminUser) {
      helpMessage += `\nüëë **Commandes Admin:**\n\n` +
        `\`${prefix}add [service] [email:password]\` - Ajoute un nouveau compte au stock\n` +
        `\`${prefix}remove [service] [email]\` - Supprime un compte du stock\n` +
        `\`${prefix}blacklist [user_id] [raison]\` - Ajoute un utilisateur √† la liste noire\n` +
        `\`${prefix}setcooldown [minutes]\` - Modifie le temps d'attente entre g√©n√©rations\n\n` +
        
        `üî∏ **Exemples:**\n` +
        `\`${prefix}add netflix john@example.com:password123\` - Ajoute un compte Netflix\n` +
        `\`${prefix}setcooldown 30\` - D√©finit le cooldown √† 30 minutes\n`;
    }
    
    // Add service categories at the bottom
    helpMessage += `\nüìÇ **Cat√©gories Disponibles:**\n\n` +
      `üé¨ **Streaming Vid√©o:** Netflix, Disney+, HBO Max, Hulu, Prime Video, etc.\n` +
      `üéµ **Musique:** Spotify, Deezer, Tidal, Apple Music\n` +
      `üìö **Livres / √âducation:** Scribd, Chegg, Quizlet, Coursera, Udemy\n` +
      `‚òÅÔ∏è **Stockage/Outils:** NordVPN, ExpressVPN, Canva Pro, Minecraft, Grammarly, ChatGPT\n` +
      `üéÆ **Jeux & Abonnements:** Xbox Game Pass, PlayStation Plus, Nintendo Online, EA Play, Ubisoft+\n`;
    
    return message.reply(helpMessage);
  };

  // Nouvelles commandes
  const handleProfileCommand = async (message: Message) => {
    // Check if user has permission
    if (!await hasPermission(message)) {
      return message.reply("‚ùå **Acc√®s Refus√©!** Vous n'avez pas la permission d'utiliser cette commande.");
    }
    
    try {
      // Ici, id√©alement, on r√©cup√©rerait l'historique des comptes g√©n√©r√©s par cet utilisateur
      // Pour l'exemple, on va simuler les donn√©es
      const userId = message.author.id;
      const userName = message.author.username;
      
      // Donn√©es fictives de profil - √† remplacer par des donn√©es r√©elles de la base de donn√©es
      const accountsGenerated = 5;
      const lastGeneration = new Date(Date.now() - 1000 * 60 * 60 * 2).toLocaleString('fr-FR'); // 2 heures avant
      const nextGenerationAllowed = new Date(Date.now() + 1000 * 60 * 30).toLocaleString('fr-FR'); // 30 min plus tard
      
      const profileMessage = `üë§ **Profil de ${userName}**\n\n` +
        `üÜî **ID Discord:** ${userId}\n` +
        `üïí **Date d'inscription:** ${new Date(message.author.createdAt).toLocaleDateString('fr-FR')}\n\n` +
        `üìä **Statistiques:**\n` +
        `‚úÖ **Comptes g√©n√©r√©s:** ${accountsGenerated}\n` +
        `‚è±Ô∏è **Derni√®re g√©n√©ration:** ${lastGeneration}\n` +
        `‚è≥ **Prochaine g√©n√©ration possible:** ${nextGenerationAllowed}\n\n` +
        `üí° **Statut:** Actif`;
      
      return message.reply(profileMessage);
    } catch (error) {
      console.error("Error fetching profile:", error);
      
      // Log error
      await storage.createLog({
        type: "error",
        action: "PROFILE_CHECK_ERROR",
        message: `Error checking profile: ${error instanceof Error ? error.message : 'Unknown error'}`,
      });
      
      return message.reply("‚ö†Ô∏è **Erreur Syst√®me:** Une erreur est survenue lors de la r√©cup√©ration de votre profil. Veuillez r√©essayer plus tard.");
    }
  };

  const handleCooldownCommand = async (message: Message, settings: BotSettings) => {
    // Check if user has permission
    if (!await hasPermission(message)) {
      return message.reply("‚ùå **Acc√®s Refus√©!** Vous n'avez pas la permission d'utiliser cette commande.");
    }
    
    try {
      // Ici on r√©cup√©rerait la derni√®re g√©n√©ration de l'utilisateur
      // Pour l'exemple, on va simuler
      const cooldownMinutes = settings.cooldown / 60;
      const lastGenerationTime = Date.now() - 1000 * 60 * 60 * 2; // 2 heures avant
      const cooldownPeriod = settings.cooldown * 1000; // en millisecondes
      const remainingTime = Math.max(0, cooldownPeriod - (Date.now() - lastGenerationTime));
      
      const remainingMinutes = Math.floor(remainingTime / (1000 * 60));
      const remainingSeconds = Math.floor((remainingTime % (1000 * 60)) / 1000);
      
      if (remainingTime <= 0) {
        return message.reply(`‚è±Ô∏è **Cooldown Termin√©!** Vous pouvez g√©n√©rer un nouveau compte d√®s maintenant.`);
      } else {
        return message.reply(
          `‚è≥ **Cooldown Actif**\n\n` +
          `‚åõ **Temps restant:** ${remainingMinutes}m ${remainingSeconds}s\n` +
          `‚è∞ **Cooldown total:** ${cooldownMinutes} minutes\n` +
          `üîÑ **Nouvelle g√©n√©ration possible √†:** ${new Date(lastGenerationTime + cooldownPeriod).toLocaleTimeString('fr-FR')}`
        );
      }
    } catch (error) {
      console.error("Error checking cooldown:", error);
      
      // Log error
      await storage.createLog({
        type: "error",
        action: "COOLDOWN_CHECK_ERROR",
        message: `Error checking cooldown: ${error instanceof Error ? error.message : 'Unknown error'}`,
      });
      
      return message.reply("‚ö†Ô∏è **Erreur Syst√®me:** Une erreur est survenue lors de la v√©rification du cooldown. Veuillez r√©essayer plus tard.");
    }
  };

  const handleInfoCommand = async (message: Message, args: string[]) => {
    // Check if user has permission
    if (!await hasPermission(message)) {
      return message.reply("‚ùå **Acc√®s Refus√©!** Vous n'avez pas la permission d'utiliser cette commande.");
    }
    
    // Get service name from args
    const serviceName = args[0]?.toLowerCase();
    if (!serviceName) {
      return message.reply(`‚ö†Ô∏è **Erreur:** Veuillez sp√©cifier un service. \n**Usage:** \`/info [service_name]\``);
    }
    
    try {
      // Find category
      const category = await storage.getCategoryByName(serviceName);
      if (!category) {
        const categories = await storage.getCategories();
        const categoryList = categories.map(c => `\`${c.name}\``).join(", ");
        return message.reply(`‚ùå **Service Non Trouv√©:** \`${serviceName}\` n'existe pas.\n\n**Services Disponibles:**\n${categoryList}`);
      }
      
      // Information sur les services - ici c'est statique mais pourrait √™tre stock√© en base
      const serviceInfo: {[key: string]: {icon: string, description: string, instructions: string}} = {
        "netflix": {
          icon: "üé¨",
          description: "Service de streaming vid√©o offrant des films, s√©ries et documentaires.",
          instructions: "Connectez-vous avec les identifiants fournis. N'ajoutez pas de profil et ne modifiez pas les param√®tres."
        },
        "spotify": {
          icon: "üéµ",
          description: "Service de streaming musical donnant acc√®s √† des millions de chansons.",
          instructions: "Utilisez l'application web plut√¥t que l'application mobile pour une meilleure exp√©rience."
        },
        "canva": {
          icon: "üé®",
          description: "Outil de design graphique en ligne pour cr√©er des visuels professionnels.",
          instructions: "Ne changez pas le mot de passe et n'utilisez pas l'espace de stockage pour vos fichiers personnels."
        }
      };
      
      // Information par d√©faut si le service n'est pas dans notre liste
      const info = serviceInfo[serviceName.toLowerCase()] || {
        icon: "‚ÑπÔ∏è",
        description: `Service dans la cat√©gorie ${category.name}.`,
        instructions: "Utilisez les identifiants g√©n√©r√©s pour vous connecter. Ne modifiez pas les param√®tres du compte."
      };
      
      // Formatter le temps de validit√© typique
      const validityPeriod = "1-3 mois"; // simul√©, id√©alement vient de la config ou statistiques
      
      const infoMessage = `${info.icon} **Information sur ${category.name}**\n\n` +
        `üìù **Description:**\n${info.description}\n\n` +
        `üìã **Instructions:**\n${info.instructions}\n\n` +
        `‚è≥ **Validit√© typique:** ${validityPeriod}\n` +
        `üìä **Stock actuel:** ${await getServiceStock(category.id)}\n` +
        `‚ö†Ô∏è **Important:** Ne modifiez jamais le mot de passe ou les informations du compte g√©n√©r√©.`;
      
      return message.reply(infoMessage);
    } catch (error) {
      console.error("Error fetching service info:", error);
      
      // Log error
      await storage.createLog({
        type: "error",
        action: "SERVICE_INFO_ERROR",
        message: `Error fetching service info: ${error instanceof Error ? error.message : 'Unknown error'}`,
      });
      
      return message.reply("‚ö†Ô∏è **Erreur Syst√®me:** Une erreur est survenue lors de la r√©cup√©ration des informations. Veuillez r√©essayer plus tard.");
    }
  };

  const handleRemoveCommand = async (message: Message, args: string[], settings: BotSettings) => {
    // Check if user is admin
    if (!await isAdmin(message)) {
      return message.reply("‚ùå **Acc√®s Refus√©!** Vous n'avez pas les permissions administrateur n√©cessaires.");
    }
    
    // Check arguments
    if (args.length < 2) {
      return message.reply(`‚ö†Ô∏è **Format Incorrect:** \n**Usage:** \`${settings.prefix}remove [service_name] [email]\``);
    }
    
    const serviceName = args[0];
    const email = args[1];
    
    try {
      // Find category
      const category = await storage.getCategoryByName(serviceName);
      if (!category) {
        return message.reply(`‚ùå **Service Non Trouv√©:** \`${serviceName}\` n'existe pas.`);
      }
      
      // Find account by email and category
      const accounts = await storage.getAccounts({ 
        categoryId: category.id,
        search: email
      });
      
      const account = accounts.find(a => a.email === email);
      
      if (!account) {
        return message.reply(`‚ùå **Compte Non Trouv√©:** Aucun compte avec l'email \`${email}\` n'a √©t√© trouv√© dans \`${serviceName}\`.`);
      }
      
      // Delete the account
      const success = await storage.deleteAccount(account.id);
      
      if (success) {
        // Log account removal
        await storage.createLog({
          type: "success",
          action: "ACCOUNT_REMOVED",
          message: `Admin ${message.author.tag} removed account: ${email} (${serviceName})`,
        });
        
        return message.reply(`‚úÖ **Compte Supprim√©:** Le compte \`${email}\` a √©t√© supprim√© de \`${serviceName}\` avec succ√®s.`);
      } else {
        return message.reply(`‚ùå **Erreur de Suppression:** Impossible de supprimer le compte \`${email}\`.`);
      }
    } catch (error) {
      console.error("Error removing account:", error);
      
      // Log error
      await storage.createLog({
        type: "error",
        action: "ACCOUNT_REMOVE_ERROR",
        message: `Error removing account: ${error instanceof Error ? error.message : 'Unknown error'}`,
      });
      
      return message.reply("‚ö†Ô∏è **Erreur Syst√®me:** Une erreur est survenue lors de la suppression du compte. Veuillez r√©essayer plus tard.");
    }
  };

  const handleBlacklistCommand = async (message: Message, args: string[]) => {
    // Check if user is admin
    if (!await isAdmin(message)) {
      return message.reply("‚ùå **Acc√®s Refus√©!** Vous n'avez pas les permissions administrateur n√©cessaires.");
    }
    
    // Check arguments
    if (args.length < 2) {
      return message.reply(`‚ö†Ô∏è **Format Incorrect:** \n**Usage:** \`/blacklist [user_id] [raison]\``);
    }
    
    const userId = args[0];
    const reason = args.slice(1).join(" ");
    
    try {
      // Ici on ajouterait l'utilisateur √† une liste noire dans la base de donn√©es
      // Pour cet exemple, on simule simplement une r√©ponse r√©ussie
      
      // Log blacklist
      await storage.createLog({
        type: "warning",
        action: "USER_BLACKLISTED",
        message: `Admin ${message.author.tag} blacklisted user: ${userId} for: ${reason}`,
      });
      
      return message.reply(`‚úÖ **Utilisateur Blacklist√©:** L'utilisateur avec l'ID \`${userId}\` a √©t√© ajout√© √† la liste noire.\nüìù **Raison:** ${reason}`);
    } catch (error) {
      console.error("Error blacklisting user:", error);
      
      // Log error
      await storage.createLog({
        type: "error",
        action: "BLACKLIST_ERROR",
        message: `Error blacklisting user: ${error instanceof Error ? error.message : 'Unknown error'}`,
      });
      
      return message.reply("‚ö†Ô∏è **Erreur Syst√®me:** Une erreur est survenue lors de l'ajout √† la liste noire. Veuillez r√©essayer plus tard.");
    }
  };

  const handleSetCooldownCommand = async (message: Message, args: string[], settings: BotSettings) => {
    // Check if user is admin
    if (!await isAdmin(message)) {
      return message.reply("‚ùå **Acc√®s Refus√©!** Vous n'avez pas les permissions administrateur n√©cessaires.");
    }
    
    // Check arguments
    if (args.length < 1) {
      return message.reply(`‚ö†Ô∏è **Format Incorrect:** \n**Usage:** \`${settings.prefix}setcooldown [minutes]\``);
    }
    
    const minutes = parseInt(args[0]);
    if (isNaN(minutes) || minutes < 0) {
      return message.reply(`‚ùå **Valeur Invalide:** Veuillez sp√©cifier un nombre de minutes valide sup√©rieur √† 0.`);
    }
    
    try {
      // Convertir en secondes pour la base de donn√©es
      const cooldownSeconds = minutes * 60;
      
      // Mettre √† jour les param√®tres pour ce serveur
      if (message.guild) {
        const updatedSettings = await storage.updateBotSettings(message.guild.id, {
          cooldown: cooldownSeconds
        });
        
        if (updatedSettings) {
          // Log cooldown update
          await storage.createLog({
            type: "success",
            action: "COOLDOWN_UPDATED",
            message: `Admin ${message.author.tag} updated cooldown to ${minutes} minutes in guild ${message.guild.name}`,
          });
          
          return message.reply(`‚úÖ **Cooldown Mis √† Jour:** Le temps d'attente entre g√©n√©rations a √©t√© d√©fini √† \`${minutes} minutes\`.`);
        } else {
          return message.reply(`‚ùå **Erreur de Mise √† Jour:** Impossible de mettre √† jour le cooldown.`);
        }
      } else {
        return message.reply(`‚ùå **Erreur:** Cette commande ne peut √™tre utilis√©e que dans un serveur Discord.`);
      }
    } catch (error) {
      console.error("Error updating cooldown:", error);
      
      // Log error
      await storage.createLog({
        type: "error",
        action: "COOLDOWN_UPDATE_ERROR",
        message: `Error updating cooldown: ${error instanceof Error ? error.message : 'Unknown error'}`,
      });
      
      return message.reply("‚ö†Ô∏è **Erreur Syst√®me:** Une erreur est survenue lors de la mise √† jour du cooldown. Veuillez r√©essayer plus tard.");
    }
  };

  // Fonction utilitaire pour obtenir le stock disponible d'un service
  const getServiceStock = async (categoryId: number): Promise<string> => {
    const accounts = await storage.getAccounts({ categoryId });
    const available = accounts.filter(a => a.status === "available").length;
    const total = accounts.length;
    
    if (available === 0) return "üî¥ √âpuis√©";
    if (available < total * 0.3) return `üü† Faible (${available}/${total})`;
    if (available < total * 0.7) return `üü° Mod√©r√© (${available}/${total})`;
    return `üü¢ Bon (${available}/${total})`;
  };

  // Start the bot
  client.login(token)
    .catch(error => {
      console.error("Error logging in Discord bot:", error);
      storage.createLog({
        type: "error",
        action: "BOT_LOGIN_ERROR",
        message: `Discord bot login failed: ${error instanceof Error ? error.message : 'Unknown error'}`,
      });
    });

  return client;
};
